{% extends 'post.jinja2' %}

{% block post_content %}
    <p>The other day I was asked to add a new page on the admin site of django that was like a list view for a model but with different actions, different columns to display and with a filter applied to the list. After hours of searching on the docs I ended up reading the source code of the contrib.admin package to understand how to do it.</p>
<p>Feel free to skip all this text and inspect the code directly on github</p>
<p class="text-center">
  <a href="https://github.com/pleasedontbelong/django-admin-view-example" class="btn btn-success external" target="_blank">
    Source Code
  </a>
</p>
<h2>The goal</h2>
<p>Let&#8217;s use the user model to create a new view on the admin. In this new view we want to display only the list of inactive users that are not admins of the site. And in this view we want to display the emails, date joined and last login. BUT we also want to keep our complete users page.</p>
<p>We&#8217;ll need une view <strong>/users/</strong> to display the complete list and <strong>/users/inactive/</strong> to display only the inactive users</p>
<h2>The code</h2>
<h3>Admin.py</h3>
<p>This is where we customize the admin pages. It&#8217;s a single file</p>

<pre><code class="python">
  # -*- coding: utf-8 -*-
'''
Created on 2015-03-24 19:17
@summary: custom admin page for users
@author: pablo
'''
from django.contrib import admin
from django.contrib.auth.models import User
from django.conf.urls import patterns, url
from functools import update_wrapper
from .admin_views import InactiveUsersView


class UserAdmin(admin.ModelAdmin):

    list_display = ('username', 'email', 'is_active', 'is_staff', 'is_superuser')

    def get_urls(self):
        # this is just a copy paste from the admin code
        def wrap(view):
            def wrapper(*args, **kwargs):
                return self.admin_site.admin_view(view)(*args, **kwargs)
            return update_wrapper(wrapper, view)
        # get the default urls
        urls = super(UserAdmin, self).get_urls()
        # define my own urls
        my_urls = patterns(
            '',
            url(r'^inactive/$',
                wrap(self.changelist_view),
                name="inactive_users")
        )
        # return the complete list of urls
        return my_urls + urls

    def get_changelist(self, request):
        """
        This method must return the view to be used for listing the model
        """
        # for inactive users use the InactiveUsersView
        if request.resolver_match.url_name == "inactive_users":
            return InactiveUsersView
        return super(UserAdmin, self).get_changelist(request)

# we must unregister the default user model
admin.site.unregister(User)
admin.site.register(User, UserAdmin)
</code></pre>
<h3>The custom views</h3>
<p>I wanted to separate the code and have the admin views in a different file but you could put it in the <strong>admin.py</strong> file too</p>

<pre><code class="python">
from django.contrib.admin.views.main import ChangeList


class InactiveUsersView(ChangeList):
    """
    This view displays the list of inactive users
    """
    def __init__(self, *args, **kwargs):
        super(InactiveUsersView, self).__init__(*args, **kwargs)
        self.list_display = ('username', 'email', 'date_joined', 'last_login')

    def get_queryset(self, request):
        qs = super(InactiveUsersView, self).get_queryset(request)
        # filter inactive and admin users
        return qs.filter(is_staff=False, is_active=False, is_superuser=False)  
</code></pre>

<h2>The result</h2>
<h3>The default users list view</h3>

<p class="text-center">
    <a href="http://d3f79bc9m1q83t.cloudfront.net/djangocustomadmin/default_users.png" target="_blank"><br />
        <img width="100%" src="http://d3f79bc9m1q83t.cloudfront.net/djangocustomadmin/default_users.png" alt="Default user list view on django"><br />
    </a>
</p>
<h3>The custom users list view</h3>
<p class="text-center">
    <a href="http://d3f79bc9m1q83t.cloudfront.net/djangocustomadmin/inactive_users.png" target="_blank"><br />
        <img width="100%" src="http://d3f79bc9m1q83t.cloudfront.net/djangocustomadmin/inactive_users.png" alt="Custom list view of users"><br />
    </a>
</p>
<h2>Final Notes</h2>
<p>I tried and tried and searched and read the docs, and I wasn&#8217;t able to find a way to add a custom link on the index page of the admin (without installing another package that manages the admin). If you are using django-suit you could add a custom link on the sidebar</p>
<p>When you are customizing your admin site, you end up writing a lot of code inside the <strong>admin.py</strong> file and it might get dirty. It&#8217;s better to separate your code in multiple files. I also tried to create an admin submodule that works fine on production, but not in the unit tests (because of the admin registry)</p>
<p>Hope this helps</p>
{% endblock %}
